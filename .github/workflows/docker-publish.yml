name: Build and Publish

on:
  push:
    branches: ["main"]
  release:
    types: [created]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/hxckr-core

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            keep-outputs = true
            keep-derivations = true

      - name: Setup Nix caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/nix
          key: ${{ runner.os }}-nix-${{ hashFiles('**/docker-image.nix', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-

      - name: Build with Nix
        run: |
          export NIX_BUILD_CORES=$(nproc)
          nix-build docker-image.nix
          ls -l result
        env:
          NIX_BUILD_CORES: ${{ steps.cores.outputs.count }}

      - name: Load image into Docker
        run: docker load < result

      - name: Verify image contents and entrypoint
        run: |
          docker run --rm hxckr-core:latest ls -l /app || echo "Failed to list /app contents"
          docker run --rm hxckr-core:latest ls -l /app/migrations || echo "Failed to list migrations"
          docker run --rm hxckr-core:latest cat /app/entrypoint.sh || echo "Failed to cat entrypoint.sh"
          docker run --rm hxckr-core:latest which diesel || echo "Failed to locate diesel"
          docker run --rm hxckr-core:latest diesel --version || echo "Failed to get diesel version"

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Tag and push Docker image
        run: |
          docker tag hxckr-core:latest ${{ env.IMAGE_NAME }}:${{ github.event_name == 'release' && 'latest' || 'dev' }}
          docker push ${{ env.IMAGE_NAME }}:${{ github.event_name == 'release' && 'latest' || 'dev' }}

      - name: Print image size and details
        run: |
          docker image ls hxckr-core:latest
          docker history hxckr-core:latest
